# –ó–¥–µ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∞–∏–æ–≥—Ä–∞–º —Ä–æ—É—Ç–µ—Ä –∏ –§ —Ñ–∏–ª—å—Ç—Ä
from aiogram import Router, F
import random, asyncio

# –ó–¥–µ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–ª–±—ç–∫–∏ –∏–∑ —Ç–∏–ø–æ–≤ –∞–∏–æ–≥—Ä–∞–º
from aiogram.types import Message, CallbackQuery
# –ó–¥–µ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∞–∏–æ–≥—Ä–∞–º
from aiogram.filters import CommandStart, Command, StateFilter

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ rq
import app.database.requests as rq


# –†–æ—É—Ç–µ—Ä
router = Router()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–ø–∞—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å, —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —Ç–∏—Ä–µ —É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
def separator(text: str):
    separator = '‚ûñ' * random.randint(1, 4)
    return text.replace('sep', separator)

class BuyProduct(StatesGroup):
    city = State()
    name = State()
    price = State()
    district = State()
    pay_method = State()
    confirm_pay = State()


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
# –¢–∞–∫–∂–µ —Ç—É—Ç –º—ã —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–∞–∫ —É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞ 
# –ø–æ-–∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ –ø—ã—Ç–∞–µ–º—Å—è, –≤—Ä–æ–¥–µ –ª–æ–≥–∏–∫–∞ —Ç–∞–∫–∞—è, –º–± –∏ –Ω–µ—Ç, –Ω–æ –ø–æ—Ö–æ–∂–µ –≤—ã–≥–ª—è–¥–∏—Ç
@router.message(CommandStart())
async def command_start(message: Message, state: FSMContext):
    # –ó–¥–µ—Å—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–¥, –º—ã –µ–≥–æ –¥–æ–±–∞–≤–ª—è–µ–º
    await rq.set_and_get_user(message.from_user.id)

    # –ó–¥–µ—Å—å –º—ã –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞, –∞ –∏–º–µ–Ω–Ω–æ id and balance
    user = await rq.set_and_get_user(message.from_user.id)

    # –ó–¥–µ—Å—å –º—ã –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–¥
    all_cities = await rq.get_all_cities()



    # –¢—É—Ç –º—ã —Å–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 
    # –ø–æ–ª—É—á–∏—Ç –≤ –∏—Ç–æ–≥–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
    result = (f'{await rq.get_message_to_welcome("welcome")}\nsep\n–ü—Ä–∏–≤–µ—Ç, <b>{user.tg_id}</b>\n–í–∞—à –±–∞–ª–∞–Ω—Å: <b>üí∞{user.user_balance} —Ä—É–±</b>'
              f'\n{await rq.get_message_to_welcome('commands')}\nsep\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</b>')
    
    # –¢—É—Ç –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —É –Ω–∞—Å –µ—Å—Ç—å –≤ –±–¥
    for one_city in all_cities:
        result += f'\nsep\nüè† <b>{one_city.name}</b>\n[–î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /city{one_city.id}]'
    
    await message.answer(separator(result))
    await state.set_state(BuyProduct.city)


# –¢—É—Ç –º—ã –≤—ã–≤–æ–¥–∏–º –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ–º –ø–æ–∫—É–ø–∞—Ç—å —á—Ç–æ-—Ç–æ
@router.message(StateFilter(BuyProduct.city))
async def choose_city(message: Message, state: FSMContext):
    # –¢—É—Ç –º—ã —Å–º–æ—Ç—Ä–∏–º –≤ –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    current_state = await state.get_state()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥, —Ç–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç 
    # –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É if
    if current_state == BuyProduct.name:
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç —Å—Ç—Ä–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /start –∏–ª–∏ @')
        return

    # –¢—É—Ç –º—ã –¥–æ—Å—Ç–∞—ë–º –∏–∑ –±–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    city_name = await rq.get_city(message.text.replace('/city', ''))
    
    # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–æ—Å—å None, —Ç–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, 
    # —á—Ç–æ –Ω–∞–¥–æ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
    if city_name is None:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å—Ç—Ä–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞!')
        return
    
    # –ó–¥–µ—Å—å –º—ã –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞
    await state.update_data(city=city_name)

    # –ó–¥–µ—Å—å –¥–æ—Å—Ç–∞—ë–º –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
    products = await rq.get_products(message.text.replace('/city', ''))

    # –ó–¥–µ—Å—å –º—ã –ø–∏—à–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    result = f'üè† –ì–æ—Ä–æ–¥: <b>{city_name}</b>\nsep\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:\nsep\n'
    
    # –¢—É—Ç –º—ã –¥–æ—Å—Ç–∞—ë–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞–∂–¥—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ
    for product in products:
        result += (f'üéÅ <b>{product.name}</b>\nüí∞ –¶–µ–Ω–∞: <b>{product.price} —Ä—É–±.</b>'
                   f'\n[ –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ üëâ /item{product.id} ]\n[ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –æ –¥–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ üëâ /reviews{product.id} ]\nsep\n')
    
    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è –µ–Ω–¥–∏–Ω–≥(–æ–∫–æ–Ω—á–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è) –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    result += await rq.get_message_to_welcome('end_for_products')
    
    await message.answer(separator(result))

    # –ó–¥–µ—Å—å –º—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    await state.set_state(BuyProduct.name)



# –ó–¥–µ—Å—å –º—ã –≤—ã–≤–æ–¥–∏–º —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
@router.message(StateFilter(BuyProduct.name))
async def choose_item(message: Message, state: FSMContext):
    # –ó–¥–µ—Å—å –º—ã –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–¥, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–∑—è—Ç—å —Ä–∞–π–æ–Ω—ã, 
    # –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ç–æ–≤–∞—Ä
    about_product = await rq.get_product(message.text.replace('/item', ''))
    
    # –ï—Å–ª–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç –≤–µ—Ä–Ω–µ—Ç—Å—è None
    # –ò –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –µ–º—É –ø—Ä–æ—Å—å–±—É –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
    if about_product is None:
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç —Å—Ç—Ä–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞\ns–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /start –∏–ª–∏ @')
        return

    # –ó–¥–µ—Å—å –º—ã –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(name = about_product.name)
    await state.update_data(price = about_product.price)

    # –ò –±–µ—Ä–µ–º —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    data = await state.get_data()

    # –¢—É—Ç —Å–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∏—Ç —é–∑–µ—Ä
    result = (f'üè† –ì–æ—Ä–æ–¥: <b>{data['city']}</b>\nüéÅ –¢–æ–≤–∞—Ä: <b>{data['name']}</b>\nüí∞ –¶–µ–Ω–∞: <b>{data['price']} —Ä—É–±.</b>'
             f'\nsep\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:\n')
    for district in about_product.districts:
        result += f'sep\nüèÉ —Ä–∞–π–æ–Ω <b>{district.name}</b>\n[ –î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /district{district.id} ]\n'
    
    await message.answer(separator(result))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–π–æ–Ω–∞
    await state.set_state(BuyProduct.district)



@router.message(StateFilter(BuyProduct.district))
async def choose_district(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–π–æ–Ω–µ
    district = await rq.get_district(message.text.replace('/district', ''))
    
    # –¢—É—Ç –º—ã –ø–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã –∏–∑ –±–¥
    pay_methods = await rq.get_pay_methods()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –Ω–µ —Ç–æ—Ç —Ä–∞–π–æ–Ω –∏–ª–∏ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, 
    # —Ç–æ –º—ã –ø–æ–ø—Ä–æ—Å–∏–º, —á—Ç–æ–±—ã –æ–Ω –≤—ã–±–∏—Ä–∞–ª —Ä–∞–π–æ–Ω —Å—Ç—Ä–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    if district is None:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω —Å—Ç—Ä–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /start –∏–ª–∏ @')
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–π–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    await state.update_data(district=district.name)

    # –ó–¥–µ—Å—å –º—ã –±–µ—Ä—ë–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    data = await state.get_data()

    # –ó–¥–µ—Å—å —Å–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = (f'üè† –ì–æ—Ä–æ–¥: <b>{data['city']}</b>\nüèÉ –†–∞–π–æ–Ω: <b>{data['district']}</b>'
              f'\nüéÅ –¢–æ–≤–∞—Ä: <b>{data['name']}</b>\nüí∞ –¶–µ–Ω–∞: <b>{data['price']} —Ä—É–±.</b>'
              f'\nsep\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:\nsep')
    
    # –¢—É—Ç –º—ã –≤—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
    for pay_method in pay_methods:
        result += f'\n{pay_method.name}\n[–î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /method{pay_method.id} ]\nsep'
    
    await message.answer(separator(result))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
    await state.set_state(BuyProduct.pay_method)



@router.message(StateFilter(BuyProduct.pay_method))
async def choose_pay_method(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ç–æ–¥–µ –æ–ø–ª–∞—Ç—ã –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É ID
    pay_method = await rq.get_pay_method(message.text.replace('/method',''))
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ 
    # –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ 
    if pay_method is None:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã —Å—Ç—Ä–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /start –∏–ª–∏ @')
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    await state.update_data(pay_method=pay_method.name)

    # –î–æ—Å—Ç–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    data = await state.get_data()

    # –ó–¥–µ—Å—å —Å–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = (f'üè† –ì–æ—Ä–æ–¥: <b>{data['city']}</b>\nüèÉ –†–∞–π–æ–Ω: <b>{data['district']}</b>'
              f'\nüéÅ –¢–æ–≤–∞—Ä: <b>{data['name']}</b>\nüí∞ –¶–µ–Ω–∞: <b>{data['price']} —Ä—É–±.</b>'
              f'\nüí± –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: <b>{data['pay_method']}</b>')
    
    #–ï—Å–ª–∏ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –±–∏—Ç–∫–æ–∏–Ω–æ–º, —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º —Ç–∞–∫:
    if pay_method.id == 1:
        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ
        value_for_pay = int(data['price'].replace(' ', '')) / 8304159

        # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—Ä–∏–ø—Ç—ã –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ, 
        # —á—Ç–æ–±—ã –ø–∞—Ä—Å–∏–ª–æ—Å—å –∏ —Å–∞–º–æ –≤ –±–¥ –¥–æ–±–∞–≤–ª—è–ª–æ—Å—å, –∞ —Ü–µ–Ω–∞ –≤—ã—Å—á–∏—Ç—ã–≤–∞–ª–∞—Å—å –æ—Ç –µ—ë –∫—É—Ä—Å–∞
        result += (f'\nsep\n–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ'
                   f'\nsep\nüí∏ <code>{value_for_pay:.8f}</code>: <b>BTC</b>'
                   f'\nsep\n–Ω–∞ Bitcoin –∫–æ—à–µ–ª–µ–∫:\n<code>{pay_method.description}</code>'
                   f'\nsep\n#‚É£ –ó–∞–∫–∞–∑ ‚Ññ<code>{random.randint(200000, 220000)}</code>, –∑–∞–ø–æ–º–Ω–∏—Ç–µ –µ–≥–æ.'
                   f'\nsep\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É\nüí¨ {random.randint(80000000, 100000000)}'
                   f'\n{await rq.get_message_to_welcome('ending_for_bitcoin')}')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–æ–∫
        await message.answer(separator(result),
                             disable_web_page_preview=True)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        await state.set_state(BuyProduct.confirm_pay)

    # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –ª–∞–π—Ç–∫–æ–∏–Ω
    elif pay_method.id == 7:
        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ
        value_for_pay = int(data['price'].replace(' ', '')) / 8067

        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        result += (f'\nsep\n–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ\nsep'
                   f'\nüí∏ <code>{value_for_pay:.8f}</code>: <b>LTC</b>'
                   f'\n–Ω–∞ Litecoin –∫–æ—à–µ–ª–µ–∫:\nsep\n<code>{pay_method.description}</code>'
                   f'\nsep\n#‚É£ –ó–∞–∫–∞–∑ ‚Ññ<code>{random.randint(2000, 220000)}</code>, –∑–∞–ø–æ–º–Ω–∏—Ç–µ –µ–≥–æ.'
                   f'\nsep\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É\nüí¨ {random.randint(10000, 100000000)}'
                   f'\n{await rq.get_message_to_welcome('ending_for_litecoin')}')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–æ–∫
        await message.answer(separator(result),
                             disable_web_page_preview=True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        await state.set_state(BuyProduct.confirm_pay)


@router.message(StateFilter(BuyProduct.confirm_pay))
async def confirm_pay(message: Message, state: FSMContext):
    # –î–æ—Å—Ç–∞—ë–º —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    data = await state.get_data()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–ª –±–∏—Ç–∫–æ–∏–Ω –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–≤–æ–¥, 
    # —Ç–æ –µ–≥–æ –±—É–¥–µ—Ç –º–æ—Ä–æ–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ 0 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
    if data['pay_method'] == 'Bitcoin':
        # –ë–æ—Ç –Ω–∞ –≤—Ä–µ–º—è –∑–∞—Å—ã–ø–∞–µ—Ç, —Ç–∏–ø–∞ —á—Ç–æ-—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
        await asyncio.sleep(random.randint(2, 5))

        # –û—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
        await message.answer(separator(await rq.get_message_to_welcome('pay_refuse_bitcoin')))
        return
    elif data['pay_method'] == 'Litecoin':
        # –ë–æ—Ç –Ω–∞ –≤—Ä–µ–º—è –∑–∞—Å—ã–ø–∞–µ—Ç, —Ç–∏–ø–∞ —á—Ç–æ-—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
        await asyncio.sleep(random.randint(2, 5))

        # –û—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
        await message.answer(separator(await rq.get_message_to_welcome('pay_refuse_litecoin')))
        return
    



